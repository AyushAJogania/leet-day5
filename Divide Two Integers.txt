class Solution {
public:
    int divide(int dividend, int divisor) {
        // Handle special cases
        if (divisor == 0 || (dividend == INT_MIN && divisor == -1))
            return INT_MAX;

        // Get the sign of the result
        int sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1;

        // Convert dividend and divisor to positive
        long long absDividend = std::labs(static_cast<long long>(dividend));
        long long absDivisor = std::labs(static_cast<long long>(divisor));

        // Perform division
        long long quotient = 0;
        while (absDividend >= absDivisor) {
            long long temp = absDivisor;
            long long multiple = 1;

            while (absDividend >= (temp << 1)) {
                temp <<= 1;
                multiple <<= 1;
            }

            absDividend -= temp;
            quotient += multiple;
        }

        // Apply the sign and handle overflow
        quotient *= sign;
        if (quotient > INT_MAX)
            return INT_MAX;
        
        return static_cast<int>(quotient);
    }
};
